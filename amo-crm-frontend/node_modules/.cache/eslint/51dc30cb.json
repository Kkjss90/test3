[{"/Users/a11/WebstormProjects/test/amo-crm-frontend/src/main.ts":"1","/Users/a11/WebstormProjects/test/amo-crm-frontend/src/App.vue":"2","/Users/a11/WebstormProjects/test/amo-crm-frontend/src/components/LeadsTable.vue":"3"},{"size":194,"mtime":1718391160875,"results":"4","hashOfConfig":"5"},{"size":266,"mtime":1718387142905,"results":"6","hashOfConfig":"5"},{"size":2782,"mtime":1718389393469,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1k0e6u3",{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},"/Users/a11/WebstormProjects/test/amo-crm-frontend/src/main.ts",[],"/Users/a11/WebstormProjects/test/amo-crm-frontend/src/App.vue",[],[],"/Users/a11/WebstormProjects/test/amo-crm-frontend/src/components/LeadsTable.vue",["16","17","18","19"],"<template>\n  <div>\n    <a-input-search\n      placeholder=\"Поиск сделок\"\n      enter-button=\"Search\"\n      @search=\"onSearch\"\n    />\n    <a-table :columns=\"columns\" :dataSource=\"leads\" rowKey=\"id\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, onMounted } from \"vue\";\nimport axios from \"axios\";\n\ninterface PipelineStatus {\n  [key: string]: { name: string };\n}\n\ninterface Users {\n  [key: string]: { name: string };\n}\n\nexport default defineComponent({\n  setup() {\n    const leads = ref([]);\n    const pipelines = ref<PipelineStatus>({});\n    const users = ref<Users>({});\n    const columns = [\n      {\n        title: \"Название\",\n        dataIndex: \"name\",\n        key: \"name\",\n      },\n      {\n        title: \"Бюджет\",\n        dataIndex: \"price\",\n        key: \"price\",\n      },\n      {\n        title: \"Статус\",\n        dataIndex: \"status\",\n        key: \"status\",\n      },\n      {\n        title: \"Ответственный\",\n        dataIndex: \"responsible\",\n        key: \"responsible\",\n      },\n    ];\n\n    const fetchLeads = async (query = \"\") => {\n      try {\n        const leadsResponse = await axios.get(`/api/leads?query=${query}`);\n        leads.value = leadsResponse.data._embedded.leads.map((lead: any) => ({\n          ...lead,\n          status: pipelines.value[lead.status_id]?.name || lead.status_id,\n          responsible:\n            users.value[lead.responsible_user_id]?.name ||\n            lead.responsible_user_id,\n        }));\n      } catch (error) {\n        console.error(\"Error fetching leads:\", error);\n      }\n    };\n\n    const fetchPipelines = async () => {\n      try {\n        const pipelinesResponse = await axios.get(`/api/pipelines`);\n        const pipelinesData = pipelinesResponse.data._embedded.pipelines;\n        pipelines.value = {};\n        pipelinesData.forEach((pipeline: any) => {\n          pipeline._embedded.statuses.forEach((status: any) => {\n            pipelines.value[status.id] = { name: status.name };\n          });\n        });\n      } catch (error) {\n        console.error(\"Error fetching pipelines:\", error);\n      }\n    };\n\n    const fetchUsers = async () => {\n      try {\n        const usersResponse = await axios.get(`/api/users`);\n        const usersData = usersResponse.data._embedded.users;\n        users.value = {};\n        usersData.forEach((user: any) => {\n          users.value[user.id] = { name: user.name };\n        });\n      } catch (error) {\n        console.error(\"Error fetching users:\", error);\n      }\n    };\n\n    const onSearch = (value: string) => {\n      fetchLeads(value);\n    };\n\n    onMounted(() => {\n      fetchPipelines();\n      fetchUsers();\n      fetchLeads();\n    });\n\n    return {\n      leads,\n      columns,\n      onSearch,\n    };\n  },\n});\n</script>\n",{"ruleId":"20","severity":1,"message":"21","line":55,"column":69,"nodeType":"22","messageId":"23","endLine":55,"endColumn":72,"suggestions":"24"},{"ruleId":"20","severity":1,"message":"21","line":72,"column":42,"nodeType":"22","messageId":"23","endLine":72,"endColumn":45,"suggestions":"25"},{"ruleId":"20","severity":1,"message":"21","line":73,"column":56,"nodeType":"22","messageId":"23","endLine":73,"endColumn":59,"suggestions":"26"},{"ruleId":"20","severity":1,"message":"21","line":87,"column":34,"nodeType":"22","messageId":"23","endLine":87,"endColumn":37,"suggestions":"27"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["28","29"],["30","31"],["32","33"],["34","35"],{"messageId":"36","fix":"37","desc":"38"},{"messageId":"39","fix":"40","desc":"41"},{"messageId":"36","fix":"42","desc":"38"},{"messageId":"39","fix":"43","desc":"41"},{"messageId":"36","fix":"44","desc":"38"},{"messageId":"39","fix":"45","desc":"41"},{"messageId":"36","fix":"46","desc":"38"},{"messageId":"39","fix":"47","desc":"41"},"suggestUnknown",{"range":"48","text":"49"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"48","text":"50"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"51","text":"49"},{"range":"51","text":"50"},{"range":"52","text":"49"},{"range":"52","text":"50"},{"range":"53","text":"49"},{"range":"53","text":"50"},[1219,1222],"unknown","never",[1819,1822],[1884,1887],[2314,2317]]